//Kelly Roudebush

//#include <cstdio>
//#include <cstdlib>
//#include <cmath>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <curand.h>
#include <curand_kernel.h>

#define Threads 768

#define N 10000    // number of bodies

#define MASS 0     // row in array for mass
#define X_POS 1    // row in array for x position
#define Y_POS 2    // row in array for y position
#define Z_POS 3    // row in array for z position
#define X_VEL 4    // row in array for x velocity
#define Y_VEL 5    // row in array for y velocity
#define Z_VEL 6    // row in array for z velocity

#define G 10       // "gravitational constant" (not really)
#define MU 0.001   // "frictional coefficient" 
#define BOXL 100.0 // periodic boundary box length
#define numVal 7 

float dt = 0.05; // time interval


//------------------------kernel functions---------------------------------------------------------------

// kernel to initialize the random states
__global__ void init(unsigned int, curandState_t* );
__global__ void randBodyAssign(curandState_t*, float* );
__global__ void nBody(curandState_t*, float*, float*, float*, float*);
__global__ void nBodyUpdate(float, float*, float* , float*, float*);


int main(int argc, char **argv) 
{

  	if (argc != 2) {
  	  	printf("\n Error:Incorrect number of arguments. \n");
    		exit (-1) ;
  	}

	FILE *fp = fopen("NBody.pdb","w+") ;
	if (fp == NULL) {
		printf("File could not be opened\n");	
		exit(0) ;
	}

  	int timesteps = atoi(argv[1]);

	if (timesteps < 0) {
		printf("Can't have negitive time!\n") ;
		exit(0) ;
	}

	cudaSetDevice(0);



//--------------------------------------------------------------------------------------
	curandState_t* dev_states ;
	cudaMalloc((void**) &dev_states, N * sizeof(curandState_t)) ;
	init<<<(int)ceil(N/Threads) + 1, Threads>>>(time(NULL), dev_states) ;
	cudaThreadSynchronize();
//--------------------------------------------------------------------------------------

	float bodyArray[N * 7];
	float Fx_dir[N]; 
	float Fy_dir[N]; 
	float Fz_dir[N];

	float *dev_body,*dev_dt, *dev_fx, *dev_fy, *dev_fz;

	cudaMalloc((void**)&dev_body, N * 7 * sizeof(float));
	cudaMalloc((void**)&dev_dt,sizeof(float)); 
	cudaMalloc((void**)&dev_fx, N * sizeof(float));
	cudaMalloc((void**)&dev_fy, N * sizeof(float));
	cudaMalloc((void**)&dev_fz, N * sizeof(float));


	
//--------------------------------------------------------------------------------------------------------------------
	cudaMemcpy(dev_body, &bodyArray, N * 7 * sizeof(float), cudaMemcpyHostToDevice) ;	
	randBodyAssign<<<(int)ceil(N / Threads) + 1, Threads >>>(dev_states, dev_body);
	cudaThreadSynchronize() ;
	cudaMemcpy(bodyArray, dev_body, N * 7 * sizeof(float), cudaMemcpyDeviceToHost);


	// Print out initial positions in PDB format
	
	fprintf(fp, "MODEL %8d\n", 0);
	for (int i = 0; i < N; i++) {
	fprintf(fp, "%s%7d  %s %s %s%4d    %8.3f%8.3f%8.3f  %4.2f  %4.3f\n",
	"ATOM", i+1, "CA ", "GLY", "A", i+1, bodyArray[i * numVal + X_POS], bodyArray[i * numVal + Y_POS], bodyArray[i * numVal + Z_POS], 1.00, 0.00);
	}
	fprintf(fp, "TER\nENDMDL\n");


	// Step through each time step
	for (int t = 0; t < timesteps; t++) {

		//-----------------------New random for each timestep----------------------------------
		init<<<(int)ceil(N / Threads) + 1, Threads >>>(time(NULL), dev_states); //N
		cudaThreadSynchronize();
		//------------------------------------------------------------------------------------------

		// Initialize forces to zero
		for (int i = 0; i < N; i++) {
			Fx_dir[i] = 0.0;
			Fy_dir[i] = 0.0;
			Fz_dir[i] = 0.0;
		}

		cudaMemcpy(dev_body, &bodyArray, N * 7 * sizeof(float), cudaMemcpyHostToDevice); 
		cudaMemcpy(dev_fx, &Fx_dir, N * sizeof(float), cudaMemcpyHostToDevice); 
		cudaMemcpy(dev_fy, &Fy_dir, N * sizeof(float), cudaMemcpyHostToDevice);
		cudaMemcpy(dev_fz, &Fz_dir, N * sizeof(float), cudaMemcpyHostToDevice);
	

  		// TODO: assign each body a random initial positions and velocities	
		nBody<<<(int)ceil(N/Threads) + 1, Threads>>>(dev_states, dev_body, dev_fx, dev_fy, dev_fz);
		
		cudaThreadSynchronize();
		
		cudaMemcpy(bodyArray, dev_body, N * 7 * sizeof(float), cudaMemcpyDeviceToHost);
		cudaMemcpy(Fx_dir, dev_fx, N * sizeof(float), cudaMemcpyDeviceToHost);
		cudaMemcpy(Fy_dir, dev_fy, N * sizeof(float), cudaMemcpyDeviceToHost);
		cudaMemcpy(Fz_dir, dev_fz, N * sizeof(float), cudaMemcpyDeviceToHost);
//--------------------------------------------------------------------------------------------------------------------

		cudaMemcpy(dev_body, &bodyArray, N * 7 * sizeof(float), cudaMemcpyHostToDevice); 
		//cudaMemcpy(dev_dt, &dt, sizeof(float), cudaMemcpyHostToDevice); 
		cudaMemcpy(dev_fx, &Fx_dir, N * sizeof(float), cudaMemcpyHostToDevice); 
		cudaMemcpy(dev_fy, &Fy_dir, N * sizeof(float), cudaMemcpyHostToDevice);
		cudaMemcpy(dev_fz, &Fz_dir, N * sizeof(float), cudaMemcpyHostToDevice);
	
		nBodyUpdate<<<(int)ceil(N/Threads) + 1, Threads>>>(dt, dev_body, dev_fx, dev_fy, dev_fz);
		
		cudaThreadSynchronize();
		
		cudaMemcpy(bodyArray, dev_body, N * 7 * sizeof(float), cudaMemcpyDeviceToHost);
		cudaMemcpy(Fx_dir, dev_fx, N * sizeof(float), cudaMemcpyDeviceToHost);
		cudaMemcpy(Fy_dir, dev_fy, N * sizeof(float), cudaMemcpyDeviceToHost);
		cudaMemcpy(Fz_dir, dev_fz, N * sizeof(float), cudaMemcpyDeviceToHost);

//--------------------------------------------------------------------------------------------------------------------

 
  		// print out initial positions in PDB format
		
	fprintf(fp,"MODEL %8d\n", t+1);
 		for (int i = 0; i < N; i++) {
    			fprintf(fp,"%s%7d  %s %s %s%4d %8.3f%8.3f%8.3f %4.2f  %4.3f\n",
        	  	 "ATOM", i+1, "CA ", "GLY", "A", i+1, bodyArray[i* numVal + X_POS], bodyArray[i* numVal + Y_POS],bodyArray[i* numVal + Z_POS],1.00, 0.00);
  		}
  	fprintf(fp,"TER\nENDMDL\n");

	}// time steps loop


	cudaFree(dev_states);
	cudaFree(dev_body);
	cudaFree(dev_fx);
	cudaFree(dev_fy);
	cudaFree(dev_fz);
	fclose(fp) ;

}


__global__ void init(unsigned int seed, curandState_t* states)
{
	// Need to know which thread we are currently working with, so: location -> threadIdx.x	
	int location = blockDim.x*blockIdx.x + threadIdx.x ;

	curand_init(seed, location, 0, &states[location]) ;
	// seed---------same seed for each core sent from host
	// location--sequence number; different for each core
	// 0------------offset
}

__global__ void randBodyAssign(curandState_t* states, float* bodyArray) 
{
	int currentBody = blockDim.x * blockIdx.x + threadIdx.x ;
	if(currentBody >= N) return ; // get the heck out of dodge if correct # of bodies have been seen 

	bodyArray[currentBody * numVal + MASS] = 0.001 ; // This will make them all the same mass

	bodyArray[currentBody * numVal + X_VEL] = curand_uniform(&states[currentBody]) ;
	bodyArray[currentBody * numVal + Y_VEL] = curand_uniform(&states[currentBody]) ;
	bodyArray[currentBody * numVal + Z_VEL] = curand_uniform(&states[currentBody]) ;

	bodyArray[currentBody * numVal + X_POS] = curand_uniform(&states[currentBody]) ;
	bodyArray[currentBody * numVal + Y_POS] = curand_uniform(&states[currentBody]) ;
	bodyArray[currentBody * numVal + Z_POS] = curand_uniform(&states[currentBody]) ;

	printf("%f, %f, %f, %f, %f, %f, %f",bodyArray[currentBody * numVal + 0],
		bodyArray[currentBody * numVal + 1],bodyArray[currentBody * numVal + 2],bodyArray[currentBody * 
		numVal + 3],bodyArray[currentBody * numVal + 4],bodyArray[currentBody * numVal + 5], bodyArray
		[currentBody * numVal + 6]);
}

__global__ void nBody(curandState_t* states,float* bodyArray,float* Fx_dir,float* Fy_dir,float* Fz_dir){

	int currentBody = blockDim.x * blockIdx.x + threadIdx.x ;
	
	if(currentBody >= N) return ;

	// When different bodies come in contact
	for( int i = 0; i < N; i++) {

		float x_diff,y_diff,z_diff ;

		if(i != currentBody){ 	//Don't try to check body against itself
			
			x_diff = bodyArray[i * numVal + X_POS] - bodyArray[currentBody * numVal + X_POS] ;
			y_diff = bodyArray[i * numVal + Y_POS] - bodyArray[currentBody * numVal + Y_POS] ;
			z_diff = bodyArray[i * numVal + Z_POS] - bodyArray[currentBody * numVal + Z_POS] ;
			
			// periodic boundary conditions, copied directly from template :P
			if (x_diff <  -BOXL * 0.5) x_diff += BOXL;
			if (x_diff >=  BOXL * 0.5) x_diff -= BOXL;
			if (y_diff <  -BOXL * 0.5) y_diff += BOXL;
			if (y_diff >=  BOXL * 0.5) y_diff -= BOXL;
			if (z_diff <  -BOXL * 0.5) z_diff += BOXL;
			if (z_diff >=  BOXL * 0.5) z_diff -= BOXL;

			// calculate distance (r)
			float rr = (x_diff * x_diff + y_diff * y_diff + z_diff * z_diff);
			float r = sqrt(rr);

			// force between bodies i and x 
			float F = 0.0, Fg = 0.0, Fr = 0.0 ;

			// if sufficiently far away, gravitation force
			if(r >2.0) {

				// TODO: compute gravitational force between body i and x
				// G is the gravitational constant)
				Fg = (G*bodyArray[i*numVal+MASS]*bodyArray[currentBody*numVal + MASS])/ rr ;

				// TODO: compute frictional force, can't use drand48() here
				int threadId = blockDim.x * blockIdx.x + threadIdx.x ;
				Fr = MU * curand_uniform(&states[threadId]) ;	//MU * a random number
			
				F = Fg + Fr ;	// total force

				Fx_dir[currentBody] += F * x_diff / r ; // resolve forces in x and y dir
				Fx_dir[currentBody] += F * y_diff / r ;	// and accumulat3e 
				Fx_dir[currentBody] += F * z_diff / r ;

			}else{	
				// When bodies too close to one another
				float Fweak = G * 0.01 * 0.01 / r ; 
				Fx_dir[currentBody] -= Fweak * x_diff / r; // resolve forces in x and y dir
				Fy_dir[currentBody] -= Fweak * y_diff / r;  // and accumulate forces
				Fz_dir[currentBody] -= Fweak * z_diff / r;  // 
			}
		}	
	}
}
__global__ void nBodyUpdate(float dt, float* bodyArray, float* Fx_dir, float* Fy_dir, float* Fz_dir) 
{
	int currentBody = blockDim.x * blockIdx.x + threadIdx.x ;
	if(currentBody >= N) return ;

	// Update velocities
	bodyArray[currentBody*numVal + X_VEL] += Fx_dir[currentBody] * dt / bodyArray[currentBody*numVal + MASS];
	bodyArray[currentBody * numVal + Y_VEL] += Fy_dir[currentBody] * dt / bodyArray[currentBody * numVal + MASS];
	bodyArray[currentBody * numVal + Z_VEL] += Fz_dir[currentBody] * dt / bodyArray[currentBody * numVal + MASS];

	// periodic boundary conditions
	if (bodyArray[currentBody * numVal + X_VEL] <  -BOXL * 0.5) bodyArray[currentBody * numVal + X_VEL] += BOXL;
	if (bodyArray[currentBody * numVal + X_VEL] >=  BOXL * 0.5) bodyArray[currentBody * numVal + X_VEL] -= BOXL;
	if (bodyArray[currentBody * numVal + Y_VEL] <  -BOXL * 0.5) bodyArray[currentBody * numVal + Y_VEL] += BOXL;
	if (bodyArray[currentBody * numVal + Y_VEL] >=  BOXL * 0.5) bodyArray[currentBody * numVal + Y_VEL] -= BOXL;
	if (bodyArray[currentBody * numVal + Z_VEL] <  -BOXL * 0.5) bodyArray[currentBody * numVal + Z_VEL] += BOXL;
	if (bodyArray[currentBody * numVal + Z_VEL] >=  BOXL * 0.5) bodyArray[currentBody * numVal + Z_VEL] -= BOXL;

	// Update positions
	bodyArray[currentBody * numVal + X_POS] += bodyArray[currentBody * numVal + X_VEL] * dt;
	bodyArray[currentBody * numVal + Y_POS] += bodyArray[currentBody * numVal + Y_VEL] * dt;
	bodyArray[currentBody * numVal + Z_POS] += bodyArray[currentBody * numVal + Z_VEL] * dt;

	// Periodic boundary conditions
	if (bodyArray[currentBody * numVal + X_POS] <  -BOXL * 0.5) bodyArray[currentBody * numVal + X_POS] += BOXL;
	if (bodyArray[currentBody * numVal + X_POS] >=  BOXL * 0.5) bodyArray[currentBody * numVal + X_POS] -= BOXL;
	if (bodyArray[currentBody * numVal + Y_POS] <  -BOXL * 0.5) bodyArray[currentBody * numVal + Y_POS] += BOXL;
	if (bodyArray[currentBody * numVal + Y_POS] >=  BOXL * 0.5) bodyArray[currentBody * numVal + Y_POS] -= BOXL;
	if (bodyArray[currentBody * numVal + Z_POS] <  -BOXL * 0.5) bodyArray[currentBody * numVal + Z_POS] += BOXL;
	if (bodyArray[currentBody * numVal + Z_POS] >=  BOXL * 0.5) bodyArray[currentBody * numVal + Z_POS] -= BOXL;

		
}
